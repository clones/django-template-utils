==========================
Retrieving public comments
==========================


Given the amount of comment spam on the Web, it's increasingly common
for sites to employ some form of comment moderation; for example,
comments posted more than 30 days after a weblog entry's publication
might be non-public until approved by the entry's author, or comments
might be submitted to Akismet and marked non-public if Akismet thinks
they're spam.

Django's bundled comments system provides the ability to have
mdoerated comments via the ``is_public`` field on both the ``Comment``
and ``FreeComment`` models, but the built-in tags for retrieving lists
of comments don't allow filtering on ``is_public`` or any other field;
as a result, templates which display comment lists often have to
include extra logic to weed out non-public comments.

This library provides two tags which are nearly identical to Django's
bundled ``get_comment_list`` and ``get_free_comment_list`` tags; the
sole difference is that the tags included here will only retrive
comments with ``is_public=True``.

To use these tags, you'll need to have ``template_utils`` in your
``INSTALLED_APPS`` list, and you'll need to have ``{% load
public_comments %}`` in your template.


``get_public_comment_list``
===========================

Like Django's built-in ``get_comment_list``, this tag retrieves
instances of ``django.contrib.comments.models.Comment`` (which
requires registration and login to post) associated with a particular
object, but this tag filters for ``is_public=True``.

Syntax::

    {% get_public_comment_list for [app_name].[model_name] [object_id] as [varname] %}

Example::

    {% get_public_comment_list for weblog.entry entry.id as comment_list %}

As with the ``get_comment_list`` tag, you can optionally pass an extra
argument -- ``reversed`` -- at the end of the tag to get the list in
reverse (i.e., newest comments first) order::

    {% get_public_comment_list for weblog.entry entry.id as comment_list reversed %}


``get_public_free_comment_list``
================================

Like Django's built-in ``get_free_comment_list``, this tag retrieves
instances of ``django.contrib.comments.models.FreeComment`` (which
allows anonymous commenting) associated with a particular object, but
this tag filters for ``is_public=True``.

Syntax::

    {% get_public_free_comment_list for [app_name].[model_name] [object_id] as [varname] %}

Example::

    {% get_public_free_comment_list for weblog.entry entry.id as comment_list %}

As with the ``get_free_comment_list`` tag, you can optionally pass an
extra argument -- ``reversed`` -- at the end of the tag to get the
list in reverse (i.e., newest comments first) order::

    {% get_public_free_comment_list for weblog.entry entry.id as comment_list reversed %}


``get_public_comment_count``
============================

Like Django's built-in ``get_comment_count``, this tag returns the
count of (registered) comments attached to an object, but it only
counts comments which have ``is_public=True``.

Syntax::

    {% get_public_comment_count for [app_name].[model_name] [object_id] as [varname] %}

Example::

    {% get_public_comment_count for weblog.entry entry.id as  comment_list %}


``get_public_free_comment_count``
=================================

Like Django's built-in ``get_free_comment_count``, this tag returns
the count of (unregistered) comments attached to an object, but it
only counts comments which have ``is_public=True``.

Syntax::

    {% get_public_free_comment_count for [app_name].[model_name] [object_id] as [varname] %}

Example::

    {% get_public_free_comment_count for weblog.entry entry.id as  comment_list %}
